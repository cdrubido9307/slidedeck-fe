{"ast":null,"code":"var _jsxFileName = \"/Users/tom/Documents/F21 COMP 523/repos/slidedeck-fe/src/views/Dashboard.js\";\n// Import CSS\nimport \"./css/Dashboard.css\"; // Import major dependencies\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { Helmet } from 'react-helmet-async';\nimport Page from \"../components/Page\"; // Import components\n\nimport Sidebar from \"../components/Sidebar\";\nimport SidebarItem from \"../components/SidebarItems\";\nimport HomeCards from \"./dashboard-pages/HomeCards\";\nimport DeveloperCards from \"./dashboard-pages/DeveloperCards\";\nimport Auth from \"../components/Auth\";\nimport ManageLogs from \"./dashboard-pages/ManageLogs\";\nimport ManageTemplates from \"./dashboard-pages/ManageTemplates\"; // Import icons\n// Import API and static content\n\nimport dashboardItems from \"../static/dashboardItems\";\nimport storage from \"../static/storage\"; // import storage from \"../static/storage\";\n\nconst DashboardContext = createContext();\n\nconst DashboardPage = props => {\n  // const AuthContext = useContext(Auth.Context);\n  const defaultState = {\n    active: {\n      i: 0,\n      title: dashboardItems[0].title\n    },\n    path: props.path ? props.path : \"/dashboard/home\",\n    sidebarShow: true\n  };\n  const lastState = storage.get(\"dashboard\");\n\n  if (props.path && lastState) {\n    let active = -1;\n    dashboardItems.map((item, i) => {\n      if (item.path === props.path) active = i;\n    });\n    lastState.path = props.path;\n    lastState.active.i = active;\n    lastState.active.title = dashboardItems[active].title;\n  }\n\n  const [dashboardState, setDashboardState] = useState(lastState ? lastState : defaultState);\n  const [dashboardContent, setDashboardContent] = useState( /*#__PURE__*/React.createElement(React.Fragment, null));\n  const [headerContent, setHeaderContent] = useState( /*#__PURE__*/React.createElement(React.Fragment, null)); // Update dashboard content based on unique path\n\n  const updateDashboard = state => {\n    switch (state.path) {\n      case \"/dashboard/logs\":\n        setDashboardContent( /*#__PURE__*/React.createElement(ManageLogs, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 37\n          }\n        }));\n        break;\n\n      case \"/dashboard/templates\":\n        setDashboardContent( /*#__PURE__*/React.createElement(ManageTemplates, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 37\n          }\n        }));\n        break;\n\n      case \"/dashboard/dev\":\n        setDashboardContent( /*#__PURE__*/React.createElement(DeveloperCards, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 37\n          }\n        }));\n        break;\n\n      default:\n        setDashboardContent( /*#__PURE__*/React.createElement(Page, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 37\n          }\n        }, state.active.title));\n        break;\n    }\n  }; // Call appropriate update functions when main state changes\n\n\n  useEffect(() => {\n    // console.log(AuthContext.user);\n    console.log(dashboardState.path);\n    updateDashboard(dashboardState);\n    storage.set(\"dashboard\", dashboardState); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dashboardState]);\n  return /*#__PURE__*/React.createElement(DashboardContext.Provider, {\n    value: {\n      state: dashboardState,\n      setState: setDashboardState\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, dashboardState.active.title)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard\" + (dashboardState.sidebarShow ? \" show-sidebar\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Sidebar, {\n    show: dashboardState.sidebarShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space-y-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, dashboardItems.map((item, i) => {\n    return /*#__PURE__*/React.createElement(SidebarItem, {\n      active: i === dashboardState.active.i,\n      key: i,\n      index: i,\n      title: item.title,\n      icon: item.icon,\n      path: item.path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-grow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard-main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, dashboardContent))));\n};\n\nconst Dashboard = {\n  Page: DashboardPage,\n  Context: DashboardContext\n};\nexport default Dashboard;","map":{"version":3,"sources":["/Users/tom/Documents/F21 COMP 523/repos/slidedeck-fe/src/views/Dashboard.js"],"names":["React","createContext","useContext","useEffect","useState","Helmet","Page","Sidebar","SidebarItem","HomeCards","DeveloperCards","Auth","ManageLogs","ManageTemplates","dashboardItems","storage","DashboardContext","DashboardPage","props","defaultState","active","i","title","path","sidebarShow","lastState","get","map","item","dashboardState","setDashboardState","dashboardContent","setDashboardContent","headerContent","setHeaderContent","updateDashboard","state","console","log","set","setState","icon","Dashboard","Context"],"mappings":"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","sourcesContent":["// Import CSS\nimport \"./css/Dashboard.css\";\n// Import major dependencies\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { Helmet } from 'react-helmet-async';\nimport Page from \"../components/Page\";\n// Import components\nimport Sidebar from \"../components/Sidebar\";\nimport SidebarItem from \"../components/SidebarItems\";\nimport HomeCards from \"./dashboard-pages/HomeCards\";\nimport DeveloperCards from \"./dashboard-pages/DeveloperCards\";\nimport Auth from \"../components/Auth\";\nimport ManageLogs from \"./dashboard-pages/ManageLogs\";\nimport ManageTemplates from \"./dashboard-pages/ManageTemplates\";\n// Import icons\n// Import API and static content\nimport dashboardItems from \"../static/dashboardItems\";\nimport storage from \"../static/storage\";\n// import storage from \"../static/storage\";\n\nconst DashboardContext = createContext();\n\nconst DashboardPage = (props) => {\n    \n    // const AuthContext = useContext(Auth.Context);\n    const defaultState = {\n        active: {\n            i: 0,\n            title: dashboardItems[0].title,\n        },\n        path: props.path ? props.path : \"/dashboard/home\",\n        sidebarShow: true\n    }\n    const lastState = storage.get(\"dashboard\");\n    if (props.path && lastState) {\n        let active = -1;\n        dashboardItems.map((item, i) => {if (item.path === props.path) active = i});\n        lastState.path = props.path;\n        lastState.active.i = active;\n        lastState.active.title = dashboardItems[active].title;\n    }\n    const [dashboardState, setDashboardState] = useState(lastState ? lastState : defaultState);\n    const [dashboardContent, setDashboardContent] = useState(<></>);\n    const [headerContent, setHeaderContent] = useState(<></>)\n    // Update dashboard content based on unique path\n    const updateDashboard = (state) => {\n        switch (state.path) {\n            case \"/dashboard/logs\":\n                setDashboardContent(<ManageLogs/>);\n                break;\n            case \"/dashboard/templates\":\n                setDashboardContent(<ManageTemplates/>);\n                break;\n            case \"/dashboard/dev\":\n                setDashboardContent(<DeveloperCards/>);\n                break;\n            default:\n                setDashboardContent(<Page>{state.active.title}</Page>);\n                break;\n        }\n    }\n    // Call appropriate update functions when main state changes\n    useEffect(() => {\n        // console.log(AuthContext.user);\n        console.log(dashboardState.path);\n        updateDashboard(dashboardState);\n        storage.set(\"dashboard\", dashboardState);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dashboardState])\n\n    return (\n        <DashboardContext.Provider value={{\n            state: dashboardState,\n            setState: setDashboardState\n        }}>\n            <Helmet>\n                <title>\n                    {dashboardState.active.title}\n                </title>\n            </Helmet>\n            <div className={\"dashboard\" + (dashboardState.sidebarShow ? \" show-sidebar\" : \"\")}>\n                {/* Sidebar */}\n                <Sidebar show={dashboardState.sidebarShow}>\n                    <div className=\"space-y-4\">\n                        {dashboardItems.map((item, i) => {return(\n                            <SidebarItem \n                                active={i === dashboardState.active.i}\n                                key={i}\n                                index={i}\n                                title={item.title}\n                                icon={item.icon}\n                                path={item.path}\n                            ></SidebarItem>\n                        )})}\n                    </div>\n                </Sidebar>\n                {/* End sidebar */}\n                {/* Main content */}\n                <div className=\"flex-grow\">\n                    <div className=\"dashboard-main-content\">\n                        {dashboardContent}\n                    </div>\n                </div>\n            </div>\n        </DashboardContext.Provider>\n            \n    )\n}\n\nconst Dashboard = {\n    Page: DashboardPage,\n    Context: DashboardContext\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}