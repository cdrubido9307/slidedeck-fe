{"ast":null,"code":"var _jsxFileName = \"/Users/tom/Documents/F21 COMP 523/repos/slidedeck-fe/src/components/Theme.js\";\n// Import CSS\n// Import major dependencies\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\"; // Import components\n// Import icons\n// Import API and static content\n\nimport themes from \"../static/themes\";\nimport storage from \"../static/storage\";\nconst ThemeContext = createContext();\n\nconst ThemeProvider = props => {\n  const defaultTheme = storage.get(\"theme\") === undefined ? props.theme : storage.get(\"theme\");\n  const [theme, setTheme] = useState(defaultTheme);\n  /**\n   * Adds/remove the appropriate theme classes \n   * to root <html> element.\n   * @param {Object} theme Unique string of new theme\n   */\n\n  const updateThemeClasses = theme => {\n    const html = window.document.documentElement;\n\n    for (let i = 0; i < themes.length; i++) {\n      html.classList.remove(themes[i].id);\n    }\n\n    html.classList.add(theme.id);\n  };\n\n  useEffect(() => {\n    storage.set(\"theme\", theme);\n    updateThemeClasses(theme);\n  }, [theme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      setTheme: setTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"theme-color\",\n    content: theme.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  })), props.children);\n};\n\nconst Theme = {\n  Context: ThemeContext,\n  Provider: ThemeProvider,\n  list: themes\n};\nexport default Theme;","map":{"version":3,"sources":["/Users/tom/Documents/F21 COMP 523/repos/slidedeck-fe/src/components/Theme.js"],"names":["React","createContext","useEffect","useState","Helmet","themes","storage","ThemeContext","ThemeProvider","props","defaultTheme","get","undefined","theme","setTheme","updateThemeClasses","html","window","document","documentElement","i","length","classList","remove","id","add","set","color","children","Theme","Context","Provider","list"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,MAAT,QAAuB,oBAAvB,C,CACA;AACA;AACA;;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAGA,MAAMC,YAAY,GAAGN,aAAa,EAAlC;;AAEA,MAAMO,aAAa,GAAIC,KAAD,IAAW;AAE7B,QAAMC,YAAY,GAAIJ,OAAO,CAACK,GAAR,CAAY,OAAZ,MAAyBC,SAA1B,GAAuCH,KAAK,CAACI,KAA7C,GAAqDP,OAAO,CAACK,GAAR,CAAY,OAAZ,CAA1E;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACO,YAAD,CAAlC;AACA;AACJ;AACA;AACA;AACA;;AACI,QAAMK,kBAAkB,GAAIF,KAAD,IAAW;AAClC,UAAMG,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBC,eAA7B;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGf,MAAM,CAACgB,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCJ,MAAAA,IAAI,CAACM,SAAL,CAAeC,MAAf,CAAsBlB,MAAM,CAACe,CAAD,CAAN,CAAUI,EAAhC;AACH;;AACDR,IAAAA,IAAI,CAACM,SAAL,CAAeG,GAAf,CAAmBZ,KAAK,CAACW,EAAzB;AACH,GAND;;AAOAtB,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,OAAO,CAACoB,GAAR,CAAY,OAAZ,EAAqBb,KAArB;AACAE,IAAAA,kBAAkB,CAACF,KAAD,CAAlB;AACH,GAHQ,EAGN,CAACA,KAAD,CAHM,CAAT;AAKA,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC1BA,MAAAA,KAAK,EAAEA,KADmB;AAE1BC,MAAAA,QAAQ,EAAEA;AAFgB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAED,KAAK,CAACc,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,EAOKlB,KAAK,CAACmB,QAPX,CADJ;AAWH,CAhCD;;AAkCA,MAAMC,KAAK,GAAG;AACVC,EAAAA,OAAO,EAAEvB,YADC;AAEVwB,EAAAA,QAAQ,EAAEvB,aAFA;AAGVwB,EAAAA,IAAI,EAAE3B;AAHI,CAAd;AAMA,eAAewB,KAAf","sourcesContent":["// Import CSS\n// Import major dependencies\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\n// Import components\n// Import icons\n// Import API and static content\nimport themes from \"../static/themes\";\nimport storage from \"../static/storage\";\n\n\nconst ThemeContext = createContext();\n\nconst ThemeProvider = (props) => {\n\n    const defaultTheme = (storage.get(\"theme\") === undefined) ? props.theme : storage.get(\"theme\");\n    const [theme, setTheme] = useState(defaultTheme);\n    /**\n     * Adds/remove the appropriate theme classes \n     * to root <html> element.\n     * @param {Object} theme Unique string of new theme\n     */\n    const updateThemeClasses = (theme) => {\n        const html = window.document.documentElement;\n        for(let i = 0; i < themes.length; i++) {\n            html.classList.remove(themes[i].id);\n        }\n        html.classList.add(theme.id);\n    }\n    useEffect(() => {\n        storage.set(\"theme\", theme);\n        updateThemeClasses(theme);\n    }, [theme]);\n\n    return(\n        <ThemeContext.Provider value={{\n            theme: theme,\n            setTheme: setTheme\n        }}>\n            <Helmet>\n                <meta name=\"theme-color\" content={theme.color}/>\n            </Helmet>\n            {props.children}\n        </ThemeContext.Provider>\n    )\n}\n\nconst Theme = {\n    Context: ThemeContext,\n    Provider: ThemeProvider,\n    list: themes \n}\n\nexport default Theme;\n"]},"metadata":{},"sourceType":"module"}