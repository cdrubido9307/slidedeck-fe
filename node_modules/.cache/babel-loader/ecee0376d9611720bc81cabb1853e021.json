{"ast":null,"code":"/**\n * Helper function to get item from localStorage.\n * @param {string} key localStorage key name \n * @returns {*} Decoded data\n */\nconst LOAD = key => {\n  return JSON.parse(localStorage.getItem(key));\n};\n/**\n * Helper function to save item to localStorage.\n * @param {string} key localStorage key name\n * @param {*} data Data to save\n * @returns None\n */\n\n\nconst SAVE = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n/**\n * Helper function to remove item from localStorage.\n * @param {string} key localStorage key name\n * @returns None\n */\n\n\nconst CLEAR = key => {\n  localStorage.removeItem(key);\n};\n/** String to prefix localStorage keys. */\n\n\nconst PREFIX = \"APP-LOCAL-STORE-\";\n/** Key of list of all other keys.\n *  @example \"APP-LOCAL-STORE-MASTER-LIST\"\n*/\n\nconst MASTER_LIST_NAME = PREFIX + \"MASTER-LIST\";\n/** List of item keys in localStorage. */\n\nconst GET_KEYS = () => {\n  // localStorage.setItem(MASTER_LIST_NAME, JSON.stringify([]));\n  // SAVE(MASTER_LIST_NAME, []);\n  const LIST = LOAD(MASTER_LIST_NAME);\n\n  if (LIST === null) {\n    SAVE(MASTER_LIST_NAME, []);\n    return [];\n  } else {\n    return LIST;\n  }\n};\n/** Provides a clean way to read/write from localStorage.\n *  @example\n *  import storage from \"./api\";\n *  storage.getItems();\n */\n\n\nconst storage = {\n  /** Get a copy of array of item keys in local localStorage.\n   *  @param None\n   *  @returns {Array} Array of keys\n   *  */\n  getKeys: () => {\n    return GET_KEYS();\n  },\n\n  /** Remove an item from local localStorage.\n   *  @param {string} key Item key\n   *  @returns None\n   *  */\n  remove: key => {\n    const PREFIX_KEY = PREFIX + key;\n    const NEW_KEYS = [];\n\n    if (GET_KEYS().includes(PREFIX_KEY)) {\n      CLEAR(PREFIX_KEY);\n      GET_KEYS().map(key => {\n        return () => {\n          if (PREFIX_KEY !== key) NEW_KEYS.push(key);\n        };\n      });\n      SAVE(MASTER_LIST_NAME, NEW_KEYS);\n    }\n  },\n\n  /** DANGER Removes all items from local localStorage.\n   *  @param None None\n   *  @returns None\n   *  */\n  removeAll: () => {\n    const KEYS = GET_KEYS();\n\n    for (let i = 0; i < KEYS.length; i++) {\n      CLEAR(KEYS[i]);\n    }\n\n    CLEAR(MASTER_LIST_NAME);\n  },\n\n  /** Save something to localStorage.\n   *  @param {string} key localStorage key name\n   *  @param {*} data Data to save\n   *  @returns None\n   *  */\n  set: (key, data) => {\n    const PREFIX_KEY = PREFIX + key;\n    SAVE(PREFIX_KEY, data);\n\n    if (!GET_KEYS().includes(PREFIX_KEY)) {\n      const NEW_KEYS = GET_KEYS();\n      NEW_KEYS.push(PREFIX_KEY);\n      SAVE(MASTER_LIST_NAME, NEW_KEYS);\n    }\n  },\n\n  /** Read something from localStorage.\n   *  @param {string} key localStorage key name\n   *  @returns {*} Data\n   *  */\n  get: key => {\n    const PREFIX_KEY = PREFIX + key;\n\n    if (GET_KEYS().includes(PREFIX_KEY)) {\n      return LOAD(PREFIX_KEY);\n    }\n  }\n};\nexport default storage;","map":{"version":3,"sources":["/Users/tom/Documents/F21 COMP 523/repos/slidedeck-fe/src/static/storage.js"],"names":["LOAD","key","JSON","parse","localStorage","getItem","SAVE","data","setItem","stringify","CLEAR","removeItem","PREFIX","MASTER_LIST_NAME","GET_KEYS","LIST","storage","getKeys","remove","PREFIX_KEY","NEW_KEYS","includes","map","push","removeAll","KEYS","i","length","set","get"],"mappings":"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","sourcesContent":["/**\n * Helper function to get item from localStorage.\n * @param {string} key localStorage key name \n * @returns {*} Decoded data\n */\nconst LOAD = (key) => {\n    return JSON.parse(localStorage.getItem(key));\n}\n/**\n * Helper function to save item to localStorage.\n * @param {string} key localStorage key name\n * @param {*} data Data to save\n * @returns None\n */\nconst SAVE = (key, data) => {\n    localStorage.setItem(key, JSON.stringify(data));\n}\n/**\n * Helper function to remove item from localStorage.\n * @param {string} key localStorage key name\n * @returns None\n */\n const CLEAR = (key) => {\n    localStorage.removeItem(key);\n}\n/** String to prefix localStorage keys. */\nconst PREFIX = \"APP-LOCAL-STORE-\";\n/** Key of list of all other keys.\n *  @example \"APP-LOCAL-STORE-MASTER-LIST\"\n*/\nconst MASTER_LIST_NAME = PREFIX + \"MASTER-LIST\";\n/** List of item keys in localStorage. */\nconst GET_KEYS = () => {\n    // localStorage.setItem(MASTER_LIST_NAME, JSON.stringify([]));\n    // SAVE(MASTER_LIST_NAME, []);\n    const LIST = LOAD(MASTER_LIST_NAME);\n    if (LIST === null) {\n        SAVE(MASTER_LIST_NAME, []);\n        return [];\n    } else {\n        return LIST;\n    }\n}\n/** Provides a clean way to read/write from localStorage.\n *  @example\n *  import storage from \"./api\";\n *  storage.getItems();\n */\nconst storage = {\n    /** Get a copy of array of item keys in local localStorage.\n     *  @param None\n     *  @returns {Array} Array of keys\n     *  */\n    getKeys: () => {\n        return GET_KEYS();\n    },\n    /** Remove an item from local localStorage.\n     *  @param {string} key Item key\n     *  @returns None\n     *  */ \n    remove: (key) => {\n        const PREFIX_KEY = PREFIX + key;\n        const NEW_KEYS = [];\n        if (GET_KEYS().includes(PREFIX_KEY)) {\n            CLEAR(PREFIX_KEY);\n            GET_KEYS().map((key) => {return(() => {\n                if (PREFIX_KEY !== key) NEW_KEYS.push(key);\n            })});\n            SAVE(MASTER_LIST_NAME, NEW_KEYS);\n        }\n    },\n    /** DANGER Removes all items from local localStorage.\n     *  @param None None\n     *  @returns None\n     *  */ \n    removeAll: () => {\n        const KEYS = GET_KEYS();\n        for(let i = 0; i < KEYS.length; i++) {\n            CLEAR(KEYS[i]);\n        }\n        CLEAR(MASTER_LIST_NAME);\n    },\n    /** Save something to localStorage.\n     *  @param {string} key localStorage key name\n     *  @param {*} data Data to save\n     *  @returns None\n     *  */\n    set: (key, data) => {\n        const PREFIX_KEY = PREFIX + key;\n        SAVE(PREFIX_KEY, data);\n        if (!GET_KEYS().includes(PREFIX_KEY)) {\n            const NEW_KEYS = GET_KEYS();\n            NEW_KEYS.push(PREFIX_KEY);\n            SAVE(MASTER_LIST_NAME, NEW_KEYS);\n        }\n    },\n    /** Read something from localStorage.\n     *  @param {string} key localStorage key name\n     *  @returns {*} Data\n     *  */\n    get: (key) => {\n        const PREFIX_KEY = PREFIX + key;\n        if (GET_KEYS().includes(PREFIX_KEY)) {\n            return LOAD(PREFIX_KEY);\n        }\n    }\n}\n\nexport default storage;"]},"metadata":{},"sourceType":"module"}